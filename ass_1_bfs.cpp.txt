#include <iostream>
#include <vector>
#include <queue>
#include <omp.h>

void parallelBFS(const std::vector<std::vector<int>>& graph, int startVertex) {
    std::vector<bool> visited(graph.size(), false);
    std::queue<int> queue;

    queue.push(startVertex);

    while (!queue.empty()) {
        int vertex = queue.front();
        queue.pop();

        if (!visited[vertex]) {
            visited[vertex] = true;
            std::cout << vertex << " ";

            #pragma omp parallel for
            for (int neighbor : graph[vertex]) {
                if (!visited[neighbor]) {
                    queue.push(neighbor);
                }
            }
        }
    }
}

int main() {
    std::vector<std::vector<int>> graph = {{1, 2}, {0, 3, 4}, {0, 5}, {1}, {1}, {2}};

    parallelBFS(graph, 0);

    return 0;
}
